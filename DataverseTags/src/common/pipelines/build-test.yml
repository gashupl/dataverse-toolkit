# Pipeline for building DataverseTag solution (including code extensions)

trigger:
  branches:
    include:
    - '*'

name: '$(Build.SourceBranchName).$(Build.BuildId)'

pool:
  vmImage: 'windows-latest'

variables:
- name: solution
  value: 'DataverseTags/src/backend/Pg.DataverseTags/Pg.DataverseTags.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name: version
  value: '1.0.1.$(Build.BuildId)'
- name: pcfVersion
  value: '1.0.$(Build.BuildId)'

steps:

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '$(solution)'

- task: CmdLine@2
  displayName: Install TypeScript compiler
  inputs:
    script: 'npm install --save-dev typescript'

- task: PowerPlatformToolInstaller@2
  displayName: Install Power Platform Tools (Including CLI) 
  inputs:
    DefaultVersion: true

- task: MSCRMToolInstaller@12
  inputs:
    nugetFeed: 'official'
    psFeed: 'official'

- task: VSBuild@1
  displayName: Build VS solution
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Run unit tests (dotnet core)
  inputs:
    command: 'test'
    projects: '**/*tests.csproj'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

- task: PowerShell@2
  displayName: Update DataverseTags solution version (unmanaged)
  inputs:
    targetType: 'inline'
    script: |
        $solutionFullPath = "DataverseTags/solutions/DataverseTags/src/Other/Solution.xml"
        $solutionXml = New-Object System.Xml.XmlDocument
        $solutionXml.PreserveWhitespace = $true
        $solutionXml.Load($solutionFullPath)
        $solutionXml.SelectSingleNode("/ImportExportXml/SolutionManifest/Version").'#text' = '$(version)'
        $solutionXml.OuterXml | Out-File -FilePath $solutionFullPath -Encoding utf8 -NoNewline  

- task: PowerShell@2
  displayName: Update DataverseTags solution version (managed)
  inputs:
    targetType: 'inline'
    script: |
        $solutionFullPath = "DataverseTags/solutions/DataverseTags_managed/src/Other/Solution.xml"
        $solutionXml = New-Object System.Xml.XmlDocument
        $solutionXml.PreserveWhitespace = $true
        $solutionXml.Load($solutionFullPath)
        $solutionXml.SelectSingleNode("/ImportExportXml/SolutionManifest/Version").'#text' = '$(version)'
        $solutionXml.OuterXml | Out-File -FilePath $solutionFullPath -Encoding utf8 -NoNewline 

- task: PowerShell@2
  displayName: Update DataverseTags control version in manifest
  inputs:
    targetType: 'inline'
    script: |
        $solutionFullPath = "DataverseTags/src/frontend/Pg.DataverseTags/DataverseTags/ControlManifest.Input.xml"
        $solutionXml = New-Object System.Xml.XmlDocument
        $solutionXml.PreserveWhitespace = $true
        $solutionXml.Load($solutionFullPath)
        $nodes = $solutionXml.SelectNodes("/manifest/control"); 
        foreach($node in $nodes) {
            $node.SetAttribute("version", "$(pcfVersion)");
        }
        $solutionXml.OuterXml | Out-File -FilePath $solutionFullPath -Encoding utf8 -NoNewline  

- task: PowerShell@2
  displayName: 'Copy Nuget package into solutions folders'
  inputs:
    targetType: inline
    script: |
      New-Item -ItemType File -Path "DataverseTags/solutions/DataverseTags_managed/src/pluginpackages/pg_Pg.DataverseTags.Plugins/package/pg_Pg.DataverseTags.Plugins.nupkg" -Force 
      Copy-Item "DataverseTags/src/backend/Pg.DataverseTags/Pg.DataverseTags.Plugins/bin/Release/Pg.DataverseTags.Plugins.1.0.0.nupkg" -Destination "DataverseTags/solutions/DataverseTags_managed/src/pluginpackages/pg_Pg.DataverseTags.Plugins/package/pg_Pg.DataverseTags.Plugins.nupkg" -Force
      New-Item -ItemType File -Path "DataverseTags/solutions/DataverseTags/src/pluginpackages/pg_Pg.DataverseTags.Plugins/package/pg_Pg.DataverseTags.Plugins.nupkg" -Force 
      Copy-Item "DataverseTags/src/backend/Pg.DataverseTags/Pg.DataverseTags.Plugins/bin/Release/Pg.DataverseTags.Plugins.1.0.0.nupkg" -Destination "DataverseTags/solutions/DataverseTags/src/pluginpackages/pg_Pg.DataverseTags.Plugins/package/pg_Pg.DataverseTags.Plugins.nupkg" -Force

- task: PowerPlatformPackSolution@2
  displayName: 'Pack managed solution file'
  inputs:
    SolutionSourceFolder: 'DataverseTags/solutions/DataverseTags_managed/src'
    SolutionOutputFile: '$(Build.ArtifactStagingDirectory)/solutions/DataverseTags_managed.zip'
    SolutionType: 'Managed'
    MapFile: 'DataverseTags/configs/solution-mappings.xml'

- task: PowerPlatformPackSolution@2
  displayName: 'Pack unmanaged solution file'
  inputs:
    SolutionSourceFolder: 'DataverseTags/solutions/DataverseTags/src'
    SolutionOutputFile: '$(Build.ArtifactStagingDirectory)/solutions/DataverseTags.zip'
    SolutionType: 'Unmanaged'
    MapFile: 'DataverseTags/configs/solution-mappings.xml'

# DataverseTags control related steps - start
- task: Npm@1
  displayName: Install missing NPM packages for Demo PCF Control
  inputs:
    workingDir: 'DataverseTags/src/frontend/Pg.DataverseTags/DataverseTags/'
    customCommand: 'install --prefer-offline --no-audit --unsafe-perm=true'

- task: Npm@1
  displayName: Build DataverseTags Control
  inputs:
    command: 'custom'
    workingDir: 'DataverseTags/src/frontend/Pg.DataverseTags/DataverseTags/'
    customCommand: 'run build'
# DataverseTags control related steps - end

- task: PowerShell@2
  displayName: Create solution with MSBuild
  inputs:
    targetType: 'inline'
    script: '& "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe" /t:build /restore /p:configuration=Release'
    workingDirectory: 'DataverseTags/solutions/DataverseTagsControls'

- task: CopyFiles@2
  displayName: Copy DataverseTags control solutions to artifacts folder
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/DataverseTags/solutions/DataverseTagsControls/bin/Release/'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/solutions'

- task: CopyFiles@2
  displayName: Copy Installation script into to artifacts folder
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/DataverseTags/scripts/install/'
    Contents: 'install.ps1'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: CopyFiles@2
  displayName: Copy Plugin Registration steps binaries into artifacts folder
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/DataverseTags/src/backend/Pg.DataverseTags/Pg.DataverseTags.Plugins.StepsRegistrator/bin/Release/'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/release'

- task: PublishBuildArtifacts@1
  displayName: Publish build artifacts
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'DataverseSolutionArtifact'